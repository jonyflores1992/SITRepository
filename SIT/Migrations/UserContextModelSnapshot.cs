// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIT.Models;

namespace SIT.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SIT.Models.Actividad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Actividad1")
                        .HasColumnName("Actividad")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CodigoBarra")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Er")
                        .HasColumnName("ER")
                        .HasColumnType("real");

                    b.Property<float?>("FactorConversion")
                        .HasColumnName("factorConversion")
                        .HasColumnType("real");

                    b.Property<Guid?>("IdComponente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdGrupoRecurso")
                        .HasColumnName("idGrupoRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdOperacion")
                        .HasColumnName("idOperacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUnidadMedida")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdComponente");

                    b.HasIndex("IdGrupoRecurso");

                    b.HasIndex("IdOperacion");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdUnidadMedida");

                    b.HasIndex("Status");

                    b.ToTable("Actividad");
                });

            modelBuilder.Entity("SIT.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Area1")
                        .HasColumnName("Area")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("IdSucursal")
                        .HasColumnName("idSucursal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdSucursal");

                    b.HasIndex("Status");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SIT.Models.Automatizacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("IdSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnName("Nombre")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdSector");

                    b.ToTable("Automatizacion");
                });

            modelBuilder.Entity("SIT.Models.Catalogo2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("IdPruebas")
                        .HasColumnName("idPruebas")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdPruebas");

                    b.ToTable("Catalogo2");
                });

            modelBuilder.Entity("SIT.Models.CategoriaProducto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("CategoriaProducto");
                });

            modelBuilder.Entity("SIT.Models.Componente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Componente1")
                        .HasColumnName("Componente")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdCategoria")
                        .HasColumnName("idCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Kilogramos")
                        .HasColumnType("real");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProducto");

                    b.HasIndex("Status");

                    b.ToTable("Componente");
                });

            modelBuilder.Entity("SIT.Models.DetalleDeParada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DetalleDeParada1")
                        .HasColumnName("detalleDeParada")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("IdGrupoDeRecurso")
                        .HasColumnName("idGrupoDeRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdMotivoParada")
                        .HasColumnName("idMotivoParada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSector")
                        .HasColumnName("idSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdGrupoDeRecurso");

                    b.HasIndex("IdMotivoParada");

                    b.HasIndex("IdSector");

                    b.HasIndex("Status");

                    b.ToTable("DetalleDeParada");
                });

            modelBuilder.Entity("SIT.Models.EstadoMovimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EstadoMovimiento1")
                        .HasColumnName("estadoMovimiento")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EstadoMovimiento");
                });

            modelBuilder.Entity("SIT.Models.Estatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Estatus");
                });

            modelBuilder.Entity("SIT.Models.GrupoRecurso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Foto")
                        .HasColumnName("foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grupo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("IdSector")
                        .HasColumnName("idSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUnidadMedida")
                        .HasColumnName("IdUnidadMedida")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdSector");

                    b.HasIndex("IdUnidadMedida");

                    b.HasIndex("Status");

                    b.ToTable("GrupoRecurso");
                });

            modelBuilder.Entity("SIT.Models.Lectura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<double?>("Cantidad")
                        .HasColumnType("float")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("CodigoBarra")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("FechaHora")
                        .HasColumnName("FechaHora")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaHoraLector")
                        .HasColumnName("FechaHoraLector")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("IdActividad")
                        .HasColumnName("idActividad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdGrupoRecurso")
                        .HasColumnName("idGrupoRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdPuntoDeControl")
                        .HasColumnName("idPuntoDeControl")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRecurso")
                        .HasColumnName("idRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSector")
                        .HasColumnName("idSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Linea")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SerialDispositivo")
                        .HasColumnName("SerialDispositivo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdActividad");

                    b.HasIndex("IdGrupoRecurso");

                    b.HasIndex("IdPuntoDeControl");

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdSector");

                    b.ToTable("Lectura");
                });

            modelBuilder.Entity("SIT.Models.Linea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Linea1")
                        .HasColumnName("Linea")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.ToTable("Linea");
                });

            modelBuilder.Entity("SIT.Models.MotivoDeParada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("IdTipoParada")
                        .HasColumnName("idTipoParada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MotivoDeParada1")
                        .HasColumnName("motivoDeParada")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoParada");

                    b.HasIndex("Status");

                    b.ToTable("MotivoDeParada");
                });

            modelBuilder.Entity("SIT.Models.Movimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("IdActividad")
                        .HasColumnName("idActividad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTipoMovimiento")
                        .HasColumnName("idTipoMovimiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Movimiento1")
                        .HasColumnName("Movimiento")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdActividad");

                    b.HasIndex("IdTipoMovimiento");

                    b.ToTable("Movimiento");
                });

            modelBuilder.Entity("SIT.Models.MtoMgrupoRecurso", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("IdGrupoRecurso")
                        .HasColumnName("idGrupoRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRecurso")
                        .HasColumnName("idRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasIndex("IdGrupoRecurso");

                    b.HasIndex("IdRecurso");

                    b.ToTable("MtoMGrupoRecurso");
                });

            modelBuilder.Entity("SIT.Models.MtoMsectorParada", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("IdMotivoParada")
                        .HasColumnName("idMotivoParada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSector")
                        .HasColumnName("idSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasIndex("IdMotivoParada");

                    b.HasIndex("IdSector");

                    b.ToTable("MtoMSectorParada");
                });

            modelBuilder.Entity("SIT.Models.Operacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("IdGrupoRecurso")
                        .HasColumnName("idGrupoRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Operacion1")
                        .HasColumnName("Operacion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdGrupoRecurso");

                    b.HasIndex("Status");

                    b.ToTable("Operacion");
                });

            modelBuilder.Entity("SIT.Models.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("IdCategoria")
                        .HasColumnName("idCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Producto1")
                        .HasColumnName("Producto")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("Status");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("SIT.Models.Pruebas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Prueba")
                        .HasColumnName("prueba")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("pruebas");
                });

            modelBuilder.Entity("SIT.Models.PuntoDeControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DescripcionUbicacion")
                        .HasColumnName("descripcionUbicacion")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("IdOperacion")
                        .HasColumnName("idOperacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Lat")
                        .HasColumnName("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnName("long")
                        .HasColumnType("float");

                    b.Property<string>("PuntoDeControl1")
                        .HasColumnName("puntoDeControl")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdOperacion");

                    b.ToTable("PuntoDeControl");
                });

            modelBuilder.Entity("SIT.Models.Recurso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CodigoBarra")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<float?>("Costo")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("IdActividad")
                        .HasColumnName("idActividad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdGrupoRecursoPrincipal")
                        .HasColumnName("idGrupoRecursoPrincipal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSector")
                        .HasColumnName("idSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUnidadMedida")
                        .HasColumnName("idUnidadMedida")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ProductividadDeseada")
                        .HasColumnType("int");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("TurnoNoche")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdActividad");

                    b.HasIndex("IdGrupoRecursoPrincipal");

                    b.HasIndex("IdSector");

                    b.HasIndex("IdUnidadMedida");

                    b.HasIndex("Status");

                    b.ToTable("Recurso");
                });

            modelBuilder.Entity("SIT.Models.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Foto")
                        .HasColumnName("foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdArea")
                        .HasColumnName("idArea")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Orden")
                        .IsRequired()
                        .HasColumnName("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Sector1")
                        .IsRequired()
                        .HasColumnName("Sector")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("Status");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("SIT.Models.Sucursal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Sucursal1")
                        .HasColumnName("Sucursal")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("idSinAgro")
                        .HasColumnName("idSinAgro")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sucursal");
                });

            modelBuilder.Entity("SIT.Models.TipoMovimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Foto")
                        .HasColumnName("foto")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TipoMovimiento1")
                        .HasColumnName("TipoMovimiento")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("TipoMovimiento");
                });

            modelBuilder.Entity("SIT.Models.TipoParada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("TipoParada1")
                        .HasColumnName("TipoParada")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TipoParada");
                });

            modelBuilder.Entity("SIT.Models.TrCambiosEstado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<TimeSpan?>("FinReal")
                        .HasColumnType("time");

                    b.Property<float?>("Horas")
                        .HasColumnName("horas")
                        .HasColumnType("real");

                    b.Property<Guid?>("IdEstadoFinal")
                        .HasColumnName("idEstadoFinal")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdEstadoInicial")
                        .HasColumnName("idEstadoInicial")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTrMovimiento")
                        .HasColumnName("idTrMovimiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("InicioReal")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoFinal");

                    b.HasIndex("IdEstadoInicial");

                    b.ToTable("trCambiosEstado");
                });

            modelBuilder.Entity("SIT.Models.TrMovimiento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Disponible")
                        .HasColumnName("Disponible")
                        .HasColumnType("real");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FechaHoraFin")
                        .HasColumnName("fechaHoraFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaHoraInicio")
                        .HasColumnName("fechaHoraInicio")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("IdActividad")
                        .HasColumnName("idActividad")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdEstado")
                        .HasColumnName("idEstado")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdGrupoRecurso")
                        .HasColumnName("idGrupoRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdMovimiento")
                        .HasColumnName("idMovimiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRecurso")
                        .HasColumnName("idRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdSector")
                        .HasColumnName("idSector")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTipoMovimiento")
                        .HasColumnName("idTipoMovimiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Producido")
                        .HasColumnName("producido")
                        .HasColumnType("real");

                    b.Property<float?>("Productividad")
                        .HasColumnName("productividad")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdActividad");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdGrupoRecurso");

                    b.HasIndex("IdMovimiento");

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdSector");

                    b.HasIndex("IdTipoMovimiento");

                    b.ToTable("trMovimiento");
                });

            modelBuilder.Entity("SIT.Models.TrParada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<TimeSpan?>("FinReal")
                        .HasColumnType("time");

                    b.Property<float?>("Horas")
                        .HasColumnName("horas")
                        .HasColumnType("real");

                    b.Property<Guid?>("IdDetalleDeParada")
                        .HasColumnName("idDetalleDeParada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdMotivoParada")
                        .HasColumnName("idMotivoParada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTrMovimiento")
                        .HasColumnName("idTrMovimiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("InicioReal")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("PeriodoTiempoFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("PeriodoTiempoInicio")
                        .HasColumnType("time");

                    b.Property<bool?>("Retroactiva")
                        .HasColumnName("retroactiva")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdDetalleDeParada");

                    b.HasIndex("IdMotivoParada");

                    b.HasIndex("IdTrMovimiento");

                    b.ToTable("trParada");
                });

            modelBuilder.Entity("SIT.Models.TrProduccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Cantidad")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("Disponibles")
                        .HasColumnName("Disponibles")
                        .HasColumnType("real");

                    b.Property<TimeSpan?>("FinReal")
                        .HasColumnType("time");

                    b.Property<Guid?>("IdComponente")
                        .HasColumnName("idComponente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdGrupoRecurso")
                        .HasColumnName("idGrupoRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdOperacion")
                        .HasColumnName("idOperacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdProducto")
                        .HasColumnName("idProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRecurso")
                        .HasColumnName("idRecurso")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdTrMovimiento")
                        .HasColumnName("idTrMovimiento")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("InicioReal")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("PeriodoTiempoFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("PeriodoTiempoInicio")
                        .HasColumnType("time");

                    b.Property<float?>("Productiva")
                        .HasColumnType("real");

                    b.Property<float?>("Productividad")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdComponente");

                    b.HasIndex("IdGrupoRecurso");

                    b.HasIndex("IdOperacion");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdTrMovimiento");

                    b.ToTable("TrProduccion");
                });

            modelBuilder.Entity("SIT.Models.UnidadDeMedida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("Status")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnidadDeMedida1")
                        .HasColumnName("unidadDeMedida")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("updateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.ToTable("UnidadDeMedida");
                });

            modelBuilder.Entity("SIT.Models.Actividad", b =>
                {
                    b.HasOne("SIT.Models.Componente", "IdComponenteNavigation")
                        .WithMany("Actividad")
                        .HasForeignKey("IdComponente")
                        .HasConstraintName("FK_Actividad_Componente");

                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoNavigation")
                        .WithMany("Actividad")
                        .HasForeignKey("IdGrupoRecurso")
                        .HasConstraintName("FK_Actividad_GrupoRecurso");

                    b.HasOne("SIT.Models.Operacion", "IdOperacionNavigation")
                        .WithMany("Actividad")
                        .HasForeignKey("IdOperacion")
                        .HasConstraintName("FK_Actividad_Operacion");

                    b.HasOne("SIT.Models.Producto", "IdProductoNavigation")
                        .WithMany("Actividad")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_Actividad_Producto");

                    b.HasOne("SIT.Models.UnidadDeMedida", "IdUnidadMedidaNavigation")
                        .WithMany("Actividad")
                        .HasForeignKey("IdUnidadMedida")
                        .HasConstraintName("FK_Actividad_UnidadDeMedida");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Actividad")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Actividad_Estatus");
                });

            modelBuilder.Entity("SIT.Models.Area", b =>
                {
                    b.HasOne("SIT.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany("Area")
                        .HasForeignKey("IdSucursal")
                        .HasConstraintName("FK_Area_Sucursal");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Area")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Area_Estatus");
                });

            modelBuilder.Entity("SIT.Models.Automatizacion", b =>
                {
                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany("Automatizacion")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_Automatizacion_Sector");
                });

            modelBuilder.Entity("SIT.Models.Catalogo2", b =>
                {
                    b.HasOne("SIT.Models.Pruebas", "IdPruebasNavigation")
                        .WithMany("Catalogo2")
                        .HasForeignKey("IdPruebas")
                        .HasConstraintName("FK_Catalogo2_pruebas");
                });

            modelBuilder.Entity("SIT.Models.Componente", b =>
                {
                    b.HasOne("SIT.Models.CategoriaProducto", "IdCategoriaNavigation")
                        .WithMany("Componente")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_Componente_CategoriaProducto");

                    b.HasOne("SIT.Models.Producto", "IdProductoNavigation")
                        .WithMany("Componente")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_Componente_Producto");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Componente")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Componente_Estatus");
                });

            modelBuilder.Entity("SIT.Models.DetalleDeParada", b =>
                {
                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoDeRecursoNavigation")
                        .WithMany("DetalleDeParada")
                        .HasForeignKey("IdGrupoDeRecurso")
                        .HasConstraintName("FK_DetalleDeParada_GrupoRecurso")
                        .IsRequired();

                    b.HasOne("SIT.Models.MotivoDeParada", "IdMotivoParadaNavigation")
                        .WithMany("DetalleDeParada")
                        .HasForeignKey("IdMotivoParada")
                        .HasConstraintName("FK_DetalleDeParada_MotivoDeParada");

                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany("DetalleDeParada")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_DetalleDeParada_Sector");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("DetalleDeParada")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_DetalleDeParada_Estatus");
                });

            modelBuilder.Entity("SIT.Models.GrupoRecurso", b =>
                {
                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany("GrupoRecurso")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_GrupoRecurso_Sector");

                    b.HasOne("SIT.Models.UnidadDeMedida", "IdUnidadMedidaNavigation")
                        .WithMany("GrupoRecurso")
                        .HasForeignKey("IdUnidadMedida")
                        .HasConstraintName("FK_GrupoRecurso_UnidadMedida");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("GrupoRecurso")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_GrupoRecurso_Estatus");
                });

            modelBuilder.Entity("SIT.Models.Lectura", b =>
                {
                    b.HasOne("SIT.Models.Actividad", "IdActividadNavigation")
                        .WithMany("TrLectura")
                        .HasForeignKey("IdActividad")
                        .HasConstraintName("FK_Lectura_Actividad");

                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoNavigation")
                        .WithMany("TrLectura")
                        .HasForeignKey("IdGrupoRecurso")
                        .HasConstraintName("FK_Lectura_GrupoRecurso");

                    b.HasOne("SIT.Models.PuntoDeControl", "IdPuntoDeControlNavigation")
                        .WithMany("Lectura")
                        .HasForeignKey("IdPuntoDeControl")
                        .HasConstraintName("FK_Lectura_PuntoDeControl");

                    b.HasOne("SIT.Models.Recurso", "IdRecursoNavigation")
                        .WithMany("TrLectura")
                        .HasForeignKey("IdRecurso")
                        .HasConstraintName("FK_Lectura_Recurso");

                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany("TrLectura")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_Lectura_Sector");
                });

            modelBuilder.Entity("SIT.Models.Linea", b =>
                {
                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Linea")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Linea_Estatus")
                        .IsRequired();
                });

            modelBuilder.Entity("SIT.Models.MotivoDeParada", b =>
                {
                    b.HasOne("SIT.Models.TipoParada", "IdTipoParadaNavigation")
                        .WithMany("MotivoDeParada")
                        .HasForeignKey("IdTipoParada")
                        .HasConstraintName("FK_MotivoDeParada_TipoParada");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("MotivoDeParada")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_MotivoDeParada_Estatus");
                });

            modelBuilder.Entity("SIT.Models.Movimiento", b =>
                {
                    b.HasOne("SIT.Models.Actividad", "IdActividadNavigation")
                        .WithMany("Movimiento")
                        .HasForeignKey("IdActividad")
                        .HasConstraintName("FK_Movimiento_Actividad");

                    b.HasOne("SIT.Models.TipoMovimiento", "IdTipoMovimientoNavigation")
                        .WithMany("Movimiento")
                        .HasForeignKey("IdTipoMovimiento")
                        .HasConstraintName("FK_Movimiento_TipoMovimiento");
                });

            modelBuilder.Entity("SIT.Models.MtoMgrupoRecurso", b =>
                {
                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoNavigation")
                        .WithMany()
                        .HasForeignKey("IdGrupoRecurso")
                        .HasConstraintName("FK_MtoMGrupoRecurso_GrupoRecurso")
                        .IsRequired();

                    b.HasOne("SIT.Models.Recurso", "IdRecursoNavigation")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .HasConstraintName("FK_MtoMGrupoRecurso_Recurso");
                });

            modelBuilder.Entity("SIT.Models.MtoMsectorParada", b =>
                {
                    b.HasOne("SIT.Models.MotivoDeParada", "IdMotivoParadaNavigation")
                        .WithMany()
                        .HasForeignKey("IdMotivoParada")
                        .HasConstraintName("FK_MtoMSectorParada_MotivoDeParada");

                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany()
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_MtoMSectorParada_Sector");
                });

            modelBuilder.Entity("SIT.Models.Operacion", b =>
                {
                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoNavigation")
                        .WithMany("Operacion")
                        .HasForeignKey("IdGrupoRecurso")
                        .HasConstraintName("FK_Operacion_GrupoRecurso");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Operacion")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Operacion_Estatus");
                });

            modelBuilder.Entity("SIT.Models.Producto", b =>
                {
                    b.HasOne("SIT.Models.CategoriaProducto", "IdCategoriaNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_Producto_CategoriaProducto");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Producto_Estatus");
                });

            modelBuilder.Entity("SIT.Models.PuntoDeControl", b =>
                {
                    b.HasOne("SIT.Models.Operacion", "IdOperacionNavigation")
                        .WithMany("PuntoDeControl")
                        .HasForeignKey("IdOperacion")
                        .HasConstraintName("FK_PuntoDeControl_Operacion");
                });

            modelBuilder.Entity("SIT.Models.Recurso", b =>
                {
                    b.HasOne("SIT.Models.Actividad", "IdActividadNavigation")
                        .WithMany("Recurso")
                        .HasForeignKey("IdActividad")
                        .HasConstraintName("FK_Recurso_Actividad");

                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoPrincipalNavigation")
                        .WithMany("Recurso")
                        .HasForeignKey("IdGrupoRecursoPrincipal")
                        .HasConstraintName("FK_Recurso_GrupoRecurso2");

                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany("Recurso")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_Recurso_Sector");

                    b.HasOne("SIT.Models.UnidadDeMedida", "IdUnidadMedidaNavigation")
                        .WithMany("Recurso")
                        .HasForeignKey("IdUnidadMedida")
                        .HasConstraintName("FK_Recurso_UnidadDeMedida");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Recurso")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Recurso_Estatus");
                });

            modelBuilder.Entity("SIT.Models.Sector", b =>
                {
                    b.HasOne("SIT.Models.Area", "IdAreaNavigation")
                        .WithMany("Sector")
                        .HasForeignKey("IdArea")
                        .HasConstraintName("FK_Sector_Area");

                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("Sector")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Sector_Estatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SIT.Models.TrCambiosEstado", b =>
                {
                    b.HasOne("SIT.Models.EstadoMovimiento", "IdEstadoFinalNavigation")
                        .WithMany("TrCambiosEstadoIdEstadoFinalNavigation")
                        .HasForeignKey("IdEstadoFinal")
                        .HasConstraintName("FK_trCambiosEstado_EstadoMovimiento1");

                    b.HasOne("SIT.Models.EstadoMovimiento", "IdEstadoInicialNavigation")
                        .WithMany("TrCambiosEstadoIdEstadoInicialNavigation")
                        .HasForeignKey("IdEstadoInicial")
                        .HasConstraintName("FK_trCambiosEstado_EstadoMovimiento");
                });

            modelBuilder.Entity("SIT.Models.TrMovimiento", b =>
                {
                    b.HasOne("SIT.Models.Actividad", "IdActividadNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdActividad")
                        .HasConstraintName("FK_trMovimiento_Actividad");

                    b.HasOne("SIT.Models.EstadoMovimiento", "IdEstadoNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_trMovimiento_EstadoMovimiento");

                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdGrupoRecurso")
                        .HasConstraintName("FK_trMovimiento_GrupoRecurso");

                    b.HasOne("SIT.Models.Movimiento", "IdMovimientoNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdMovimiento")
                        .HasConstraintName("FK_trMovimiento_Movimiento");

                    b.HasOne("SIT.Models.Recurso", "IdRecursoNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdRecurso")
                        .HasConstraintName("FK_trMovimiento_Recurso");

                    b.HasOne("SIT.Models.Sector", "IdSectorNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdSector")
                        .HasConstraintName("FK_trMovimiento_Sector");

                    b.HasOne("SIT.Models.TipoMovimiento", "IdTipoMovimientoNavigation")
                        .WithMany("TrMovimiento")
                        .HasForeignKey("IdTipoMovimiento")
                        .HasConstraintName("FK_trMovimiento_TipoMovimiento");
                });

            modelBuilder.Entity("SIT.Models.TrParada", b =>
                {
                    b.HasOne("SIT.Models.DetalleDeParada", "IdDetalleDeParadaNavigation")
                        .WithMany("TrParada")
                        .HasForeignKey("IdDetalleDeParada")
                        .HasConstraintName("FK_trParada_DetalleDeParada");

                    b.HasOne("SIT.Models.MotivoDeParada", "IdMotivoParadaNavigation")
                        .WithMany("TrParada")
                        .HasForeignKey("IdMotivoParada")
                        .HasConstraintName("FK_trParada_MotivoDeParada");

                    b.HasOne("SIT.Models.TrMovimiento", "IdTrMovimientoNavigation")
                        .WithMany("TrParada")
                        .HasForeignKey("IdTrMovimiento")
                        .HasConstraintName("FK_trParada_trMovimiento");
                });

            modelBuilder.Entity("SIT.Models.TrProduccion", b =>
                {
                    b.HasOne("SIT.Models.Componente", "IdComponenteNavigation")
                        .WithMany("TrProduccion")
                        .HasForeignKey("IdComponente")
                        .HasConstraintName("FK_TrProduccion_Componente");

                    b.HasOne("SIT.Models.GrupoRecurso", "IdGrupoRecursoNavigation")
                        .WithMany("TrProduccion")
                        .HasForeignKey("IdGrupoRecurso")
                        .HasConstraintName("FK_TrProduccion_GrupoRecurso");

                    b.HasOne("SIT.Models.Operacion", "IdOperacionNavigation")
                        .WithMany("TrProduccion")
                        .HasForeignKey("IdOperacion")
                        .HasConstraintName("FK_TrProduccion_Operacion");

                    b.HasOne("SIT.Models.Producto", "IdProductoNavigation")
                        .WithMany("TrProduccion")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_TrProduccion_Producto");

                    b.HasOne("SIT.Models.Recurso", "IdRecursoNavigation")
                        .WithMany("TrProduccion")
                        .HasForeignKey("IdRecurso")
                        .HasConstraintName("FK_TrProduccion_Recurso");

                    b.HasOne("SIT.Models.TrMovimiento", "IdTrMovimientoNavigation")
                        .WithMany("TrProduccion")
                        .HasForeignKey("IdTrMovimiento")
                        .HasConstraintName("FK_TrProduccion_trMovimiento");
                });

            modelBuilder.Entity("SIT.Models.UnidadDeMedida", b =>
                {
                    b.HasOne("SIT.Models.Estatus", "StatusNavigation")
                        .WithMany("UnidadDeMedida")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_UnidadDeMedida_Estatus");
                });
#pragma warning restore 612, 618
        }
    }
}
